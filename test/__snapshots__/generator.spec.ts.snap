// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /[id].put.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchUpdateById = <T={updatedAt:string;isActive:boolean;count:number;}|{price:number;age:number;status:string;}>(data: T) => useFetch<{data:(string|number|number[])[];result1:{data:boolean[];result1:number;};}>(\`api/\${data.id}\`, { method: 'put', body: apiGenOmit(data, ["id"]) })
export const useTFetchUpdateByIdAsync = <T={updatedAt:string;isActive:boolean;count:number;}|{price:number;age:number;status:string;}>(data: T) => $fetch<{data:(string|number|number[])[];result1:{data:boolean[];result1:number;};}>(\`api/\${data.id}\`, { method: 'put', body: apiGenOmit(data, ["id"]) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /[name]/orders/messages/[post-id]/tags.get.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchNameOrdersMessagesPostIdTagsGet = <T={age:number;isActive:boolean;name:string;}&{title:string;price:number;email:string;}>(data: T) => useFetch<{data:{data:number;result1:string;};result1:{data:{data:{data:(boolean|{data:{};})[];result1:boolean;};result1:{data:{data:boolean;};result1:string;};};result1:{data:(string|(string|number)[]|{data:{data:string;};})[];result1:({data:boolean;}|{data:(boolean[]|{data:string;})[];}[])[];items2:boolean;};items2:{data:boolean;};};items2:boolean;}>(\`api/\${data.name}/orders/messages/\${data.post-id}/tags.get\`, { method: 'get', params: apiGenOmit(data, ["name","post-id"]) })
export const useTFetchNameOrdersMessagesPostIdTagsGetAsync = <T={age:number;isActive:boolean;name:string;}&{title:string;price:number;email:string;}>(data: T) => $fetch<{data:{data:number;result1:string;};result1:{data:{data:{data:(boolean|{data:{};})[];result1:boolean;};result1:{data:{data:boolean;};result1:string;};};result1:{data:(string|(string|number)[]|{data:{data:string;};})[];result1:({data:boolean;}|{data:(boolean[]|{data:string;})[];}[])[];items2:boolean;};items2:{data:boolean;};};items2:boolean;}>(\`api/\${data.name}/orders/messages/\${data.post-id}/tags.get\`, { method: 'get', params: apiGenOmit(data, ["name","post-id"]) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /[order-id]/[id]/[slug].put.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchOrderIdIdUpdateBySlug = <T={name:string;email:string;isActive:boolean;}&{status:string;age:number;title:string;}>(data: T) => useFetch<{data:{data:string;result1:string;items2:{data:{data:boolean;};result1:boolean;};};result1:(boolean|{data:(boolean|(string|{data:boolean;})[])[];result1:({data:number;result1:number;}|{data:{data:{data:string;result1:number;items2:number;};result1:{data:boolean;};}[];result1?:undefined;}|{data:boolean;result1?:undefined;})[];items2?:undefined;}|{data:{data:({data:{data:{data:number;};};}|{data:(boolean|{data:string;})[];})[];result1:(number|{data:{data:{};};result1:((number|boolean)[]|{data:boolean;})[];})[];items2:string;};result1:number;items2:{data:number;};})[];}>(\`api/\${data.order-id}/\${data.id}/\${data.slug}\`, { method: 'put', body: apiGenOmit(data, ["order-id","id","slug"]) })
export const useTFetchOrderIdIdUpdateBySlugAsync = <T={name:string;email:string;isActive:boolean;}&{status:string;age:number;title:string;}>(data: T) => $fetch<{data:{data:string;result1:string;items2:{data:{data:boolean;};result1:boolean;};};result1:(boolean|{data:(boolean|(string|{data:boolean;})[])[];result1:({data:number;result1:number;}|{data:{data:{data:string;result1:number;items2:number;};result1:{data:boolean;};}[];result1?:undefined;}|{data:boolean;result1?:undefined;})[];items2?:undefined;}|{data:{data:({data:{data:{data:number;};};}|{data:(boolean|{data:string;})[];})[];result1:(number|{data:{data:{};};result1:((number|boolean)[]|{data:boolean;})[];})[];items2:string;};result1:number;items2:{data:number;};})[];}>(\`api/\${data.order-id}/\${data.id}/\${data.slug}\`, { method: 'put', body: apiGenOmit(data, ["order-id","id","slug"]) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /[pid]/settings.delete.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchPidSettingsRemove = <T={status:string;count:number;}&{title:string;}>(data: T) => useFetch<{data:{data:{data:boolean;};};result1:string;}>(\`api/\${data.pid}/settings.delete\`, { method: 'delete', params: apiGenOmit(data, ["pid"]) })
export const useTFetchPidSettingsRemoveAsync = <T={status:string;count:number;}&{title:string;}>(data: T) => $fetch<{data:{data:{data:boolean;};};result1:string;}>(\`api/\${data.pid}/settings.delete\`, { method: 'delete', params: apiGenOmit(data, ["pid"]) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /[post-id]/comments/categories/[category-id]/comments.post.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchPostIdCommentsCategoriesCategoryIdCommentsCreate = <T={count:number;email:string;name:string;}|{price:number;status:string;isActive:boolean;}>(data: T) => useFetch<{data:string;result1:(boolean|{data:boolean[];result1:({data:{data:{data:number[];};result1:{data:string;};};}|(boolean|({data:boolean;result1:number;items2:{data:number;};}|{data:boolean;result1:(string|boolean)[];items2?:undefined;})[]|{data:{data:string[];};result1:{data:number[];result1:boolean;};})[]|({data:boolean;result1:{data:string;};items2:{data:string;};}|{data:(string|{data:boolean;result1?:undefined;}|{data:string;result1:boolean;})[];result1:{data:boolean;};items2?:undefined;})[])[];items2:boolean;}|{data:{data:string[];result1:{data:string;};};result1:{data:(boolean|{data:boolean;result1:string;}[]|({data:number;result1:string;items2:number;}|{data:number;result1:string;items2:boolean;})[])[];}[];items2:(string|boolean|{data:boolean[][];})[];})[];items2:{data:{data:((({data:{data:boolean;};result1:number;items2:boolean[];}|(number|(string|boolean)[])[])[]|{data:boolean;})[]|{data:boolean;result1:boolean;})[];result1:number;};result1:{data:{data:{data:number;}[][];result1:({data:(string|boolean)[];}|{data:boolean;})[];items2:string;}[];};};}>(\`api/\${data.post-id}/comments/categories/\${data.category-id}/comments.post\`, { method: 'post', body: apiGenOmit(data, ["post-id","category-id"]) })
export const useTFetchPostIdCommentsCategoriesCategoryIdCommentsCreateAsync = <T={count:number;email:string;name:string;}|{price:number;status:string;isActive:boolean;}>(data: T) => $fetch<{data:string;result1:(boolean|{data:boolean[];result1:({data:{data:{data:number[];};result1:{data:string;};};}|(boolean|({data:boolean;result1:number;items2:{data:number;};}|{data:boolean;result1:(string|boolean)[];items2?:undefined;})[]|{data:{data:string[];};result1:{data:number[];result1:boolean;};})[]|({data:boolean;result1:{data:string;};items2:{data:string;};}|{data:(string|{data:boolean;result1?:undefined;}|{data:string;result1:boolean;})[];result1:{data:boolean;};items2?:undefined;})[])[];items2:boolean;}|{data:{data:string[];result1:{data:string;};};result1:{data:(boolean|{data:boolean;result1:string;}[]|({data:number;result1:string;items2:number;}|{data:number;result1:string;items2:boolean;})[])[];}[];items2:(string|boolean|{data:boolean[][];})[];})[];items2:{data:{data:((({data:{data:boolean;};result1:number;items2:boolean[];}|(number|(string|boolean)[])[])[]|{data:boolean;})[]|{data:boolean;result1:boolean;})[];result1:number;};result1:{data:{data:{data:number;}[][];result1:({data:(string|boolean)[];}|{data:boolean;})[];items2:string;}[];};};}>(\`api/\${data.post-id}/comments/categories/\${data.category-id}/comments.post\`, { method: 'post', body: apiGenOmit(data, ["post-id","category-id"]) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /[type].get.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchGetByType = <T={status:string;name:string;}&{price:number;updatedAt:string;}>(data: T) => useFetch<{data:{data:{data:{data:string;};};};result1:boolean;}>(\`api/\${data.type}\`, { method: 'get', params: apiGenOmit(data, ["type"]) })
export const useTFetchGetByTypeAsync = <T={status:string;name:string;}&{price:number;updatedAt:string;}>(data: T) => $fetch<{data:{data:{data:{data:string;};};};result1:boolean;}>(\`api/\${data.type}\`, { method: 'get', params: apiGenOmit(data, ["type"]) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /[type]/[name]/[category-id]/[id]/[user-id].delete.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchTypeNameCategoryIdIdRemoveByUserId = <T=Omit<{count:number;title:string;price:number;status:string;isActive:boolean;email:string;},'isActive'>&Partial<{count:number;}>>(data: T) => useFetch<{data:(string|number|(string|{data:{data:{data:(string|{data:boolean;})[];result1:{data:{data:number;};};};result1:{data:boolean;result1:({data:number;}|{data:boolean;})[];};};result1:{data:{data:string;};result1:boolean;items2:{data:{data:{};};result1:string;};};}|{data:(number|boolean[]|{data:string;})[];result1?:undefined;})[])[];result1:boolean;items2:{data:({data:{data:number[];result1:(string|boolean)[];}[];result1:{data:boolean;result1:{data:boolean;};};}|{data:{data:string[];};result1:number;})[][];result1:string;items2:string;};}>(\`api/\${data.type}/\${data.name}/\${data.category-id}/\${data.id}/\${data.user-id}\`, { method: 'delete', params: apiGenOmit(data, ["type","name","category-id","id","user-id"]) })
export const useTFetchTypeNameCategoryIdIdRemoveByUserIdAsync = <T=Omit<{count:number;title:string;price:number;status:string;isActive:boolean;email:string;},'isActive'>&Partial<{count:number;}>>(data: T) => $fetch<{data:(string|number|(string|{data:{data:{data:(string|{data:boolean;})[];result1:{data:{data:number;};};};result1:{data:boolean;result1:({data:number;}|{data:boolean;})[];};};result1:{data:{data:string;};result1:boolean;items2:{data:{data:{};};result1:string;};};}|{data:(number|boolean[]|{data:string;})[];result1?:undefined;})[])[];result1:boolean;items2:{data:({data:{data:number[];result1:(string|boolean)[];}[];result1:{data:boolean;result1:{data:boolean;};};}|{data:{data:string[];};result1:number;})[][];result1:string;items2:string;};}>(\`api/\${data.type}/\${data.name}/\${data.category-id}/\${data.id}/\${data.user-id}\`, { method: 'delete', params: apiGenOmit(data, ["type","name","category-id","id","user-id"]) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /[user-id]/[id]/messages/[id]/products.put.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchUserIdIdMessagesIdProductsUpdate = <T=Input20>(data: T) => useFetch<{data:({data:number;result1?:undefined;}|{data:(string|{data:{data:string[];result1:boolean;};result1:((number|boolean)[]|{data:number;result1:string;})[];})[];result1:string;}|{data:((number|{data:number;result1:number;}[])[]|{data:string;result1:boolean;items2:{data:{data:string;};result1:number;items2:string;};})[];result1?:undefined;})[][];}>(\`api/\${data.user-id}/\${data.id}/messages/\${data.id}/products.put\`, { method: 'put', body: apiGenOmit(data, ["user-id","id","id"]) })
export const useTFetchUserIdIdMessagesIdProductsUpdateAsync = <T=Input20>(data: T) => $fetch<{data:({data:number;result1?:undefined;}|{data:(string|{data:{data:string[];result1:boolean;};result1:((number|boolean)[]|{data:number;result1:string;})[];})[];result1:string;}|{data:((number|{data:number;result1:number;}[])[]|{data:string;result1:boolean;items2:{data:{data:string;};result1:number;items2:string;};})[];result1?:undefined;})[][];}>(\`api/\${data.user-id}/\${data.id}/messages/\${data.id}/products.put\`, { method: 'put', body: apiGenOmit(data, ["user-id","id","id"]) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /[user-id]/categories/[slug]/settings/posts.delete.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchUserIdCategoriesSlugSettingsPostsRemove = <T=Omit<{age:number;price:number;title:string;name:string;status:string;createdAt:string;},'name'>&Partial<{price:number;isActive:boolean;status:string;}>>(data: T) => useFetch<{data:{data:(string|(string|number)[])[];result1:{data:boolean[];};items2:{data:boolean;result1:number;};};}>(\`api/\${data.user-id}/categories/\${data.slug}/settings/posts.delete\`, { method: 'delete', params: apiGenOmit(data, ["user-id","slug"]) })
export const useTFetchUserIdCategoriesSlugSettingsPostsRemoveAsync = <T=Omit<{age:number;price:number;title:string;name:string;status:string;createdAt:string;},'name'>&Partial<{price:number;isActive:boolean;status:string;}>>(data: T) => $fetch<{data:{data:(string|(string|number)[])[];result1:{data:boolean[];};items2:{data:boolean;result1:number;};};}>(\`api/\${data.user-id}/categories/\${data.slug}/settings/posts.delete\`, { method: 'delete', params: apiGenOmit(data, ["user-id","slug"]) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /[vid]/[type]/[id].post.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchVidTypeCreateById = <T=Input12>(data: T) => useFetch<{data:{data:(string|number|{data:boolean[];result1:boolean;items2:{data:{data:string;};result1:{data:string;};items2:{data:boolean;};};})[];result1:{data:{data:{data:number[];result1:string;};};result1:boolean;};};}>(\`api/\${data.vid}/\${data.type}/\${data.id}\`, { method: 'post', body: apiGenOmit(data, ["vid","type","id"]) })
export const useTFetchVidTypeCreateByIdAsync = <T=Input12>(data: T) => $fetch<{data:{data:(string|number|{data:boolean[];result1:boolean;items2:{data:{data:string;};result1:{data:string;};items2:{data:boolean;};};})[];result1:{data:{data:{data:number[];result1:string;};};result1:boolean;};};}>(\`api/\${data.vid}/\${data.type}/\${data.id}\`, { method: 'post', body: apiGenOmit(data, ["vid","type","id"]) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /categories/[pid]/comments/comments.post.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchCategoriesPidCommentsCommentsCreate = <T={updatedAt:string;count:number;}&{title:string;isActive:boolean;}>(data: T) => useFetch<{data:string;result1:string;}>(\`api/categories/\${data.pid}/comments/comments.post\`, { method: 'post', body: apiGenOmit(data, ["pid"]) })
export const useTFetchCategoriesPidCommentsCommentsCreateAsync = <T={updatedAt:string;count:number;}&{title:string;isActive:boolean;}>(data: T) => $fetch<{data:string;result1:string;}>(\`api/categories/\${data.pid}/comments/comments.post\`, { method: 'post', body: apiGenOmit(data, ["pid"]) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /history.get.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchHistoryGet = <T={test:number,tst3:string}>(data: T) => useFetch<{c:number;d:string;u:number[];}[]>(\`api/history.get\`, { method: 'get', params: apiGenOmit(data, []) })
export const useTFetchHistoryGetAsync = <T={test:number,tst3:string}>(data: T) => $fetch<{c:number;d:string;u:number[];}[]>(\`api/history.get\`, { method: 'get', params: apiGenOmit(data, []) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /messages.post.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchMessagesCreate = <T={status:string;isActive:boolean;title:string;}|{age:number;email:string;updatedAt:string;}>(data: T) => useFetch<{data:boolean[];result1:{data:({data:{data:{data:string;result1:{data:{data:string;};};};result1:boolean;};result1?:undefined;items2?:undefined;}|{data:(number|{data:number[];result1?:undefined;}|{data:boolean[];result1:number;})[];result1:({data:(string|number)[];result1:(string|number)[];}[]|(string|number|{data:{data:boolean;};result1:{data:string;};items2:{data:boolean;};})[])[];items2:{data:boolean;};}|((boolean|{data:boolean[];result1:{data:boolean;};items2?:undefined;}|{data:boolean;result1:{data:number;};items2:string[];})[]|{data:boolean;result1:{data:boolean;result1:boolean;items2:string;};items2:{data:number;result1:string;items2:boolean;};}[]|({data:{data:number;};result1?:undefined;}|{data:boolean;result1:string;})[])[][])[];};}>(\`api/messages.post\`, { method: 'post', body: apiGenOmit(data, []) })
export const useTFetchMessagesCreateAsync = <T={status:string;isActive:boolean;title:string;}|{age:number;email:string;updatedAt:string;}>(data: T) => $fetch<{data:boolean[];result1:{data:({data:{data:{data:string;result1:{data:{data:string;};};};result1:boolean;};result1?:undefined;items2?:undefined;}|{data:(number|{data:number[];result1?:undefined;}|{data:boolean[];result1:number;})[];result1:({data:(string|number)[];result1:(string|number)[];}[]|(string|number|{data:{data:boolean;};result1:{data:string;};items2:{data:boolean;};})[])[];items2:{data:boolean;};}|((boolean|{data:boolean[];result1:{data:boolean;};items2?:undefined;}|{data:boolean;result1:{data:number;};items2:string[];})[]|{data:boolean;result1:{data:boolean;result1:boolean;items2:string;};items2:{data:number;result1:string;items2:boolean;};}[]|({data:{data:number;};result1?:undefined;}|{data:boolean;result1:string;})[])[][])[];};}>(\`api/messages.post\`, { method: 'post', body: apiGenOmit(data, []) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /messages/[category-id].put.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchMessagesUpdateByCategoryId = <T={isActive:boolean;title:string;}|{name:string;price:number;}>(data: T) => useFetch<{data:{data:boolean;result1:boolean;};}>(\`api/messages/\${data.category-id}\`, { method: 'put', body: apiGenOmit(data, ["category-id"]) })
export const useTFetchMessagesUpdateByCategoryIdAsync = <T={isActive:boolean;title:string;}|{name:string;price:number;}>(data: T) => $fetch<{data:{data:boolean;result1:boolean;};}>(\`api/messages/\${data.category-id}\`, { method: 'put', body: apiGenOmit(data, ["category-id"]) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /orders/profiles.post.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchOrdersProfilesCreate = <T=Input5>(data: T) => useFetch<{data:{data:number[];result1:number;};result1:{data:{data:{data:string;};};result1:boolean;items2:{data:boolean;result1:number;items2:{data:string;};};};items2:number;}>(\`api/orders/profiles.post\`, { method: 'post', body: apiGenOmit(data, []) })
export const useTFetchOrdersProfilesCreateAsync = <T=Input5>(data: T) => $fetch<{data:{data:number[];result1:number;};result1:{data:{data:{data:string;};};result1:boolean;items2:{data:boolean;result1:number;items2:{data:string;};};};items2:number;}>(\`api/orders/profiles.post\`, { method: 'post', body: apiGenOmit(data, []) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /posts/[vid].put.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchPostsUpdateByVid = <T=Input2>(data: T) => useFetch<{data:{data:{data:boolean[];result1:boolean;};};result1:{data:number;};}>(\`api/posts/\${data.vid}\`, { method: 'put', body: apiGenOmit(data, ["vid"]) })
export const useTFetchPostsUpdateByVidAsync = <T=Input2>(data: T) => $fetch<{data:{data:{data:boolean[];result1:boolean;};};result1:{data:number;};}>(\`api/posts/\${data.vid}\`, { method: 'put', body: apiGenOmit(data, ["vid"]) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /posts/profiles.get.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchPostsProfilesGet = <T={age:number;createdAt:string;}|{price:number;updatedAt:string;}>(data: T) => useFetch<{data:string;}>(\`api/posts/profiles.get\`, { method: 'get', params: apiGenOmit(data, []) })
export const useTFetchPostsProfilesGetAsync = <T={age:number;createdAt:string;}|{price:number;updatedAt:string;}>(data: T) => $fetch<{data:string;}>(\`api/posts/profiles.get\`, { method: 'get', params: apiGenOmit(data, []) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /products/[id]/[post-id]/[variant-id]/users.get.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchProductsIdPostIdVariantIdUsersGet = <T=Omit<{age:number;price:number;count:number;isActive:boolean;createdAt:string;updatedAt:string;name:string;title:string;},'price'>&Partial<{count:number;createdAt:string;updatedAt:string;}>>(data: T) => useFetch<{data:(string|boolean|{data:(boolean|(number|{data:(number|boolean)[];result1?:undefined;}|{data:{data:boolean;};result1:boolean;})[])[][];result1:{data:boolean;};items2:(string|{data:{data:string;result1:number;items2:string;};}|{data:(boolean[]|{data:boolean;})[];result1:{data:(number|boolean)[];};items2:(string|number|boolean)[];}[])[];})[];result1:{data:({data:{data:number;};}|{data:boolean;})[];result1:{data:string;result1:{data:string;};items2:{data:{data:{};}[];};};items2:{data:{data:{data:{};};};result1:boolean;items2:{data:(boolean[][][]|{data:boolean;})[];};};};items2:(boolean|(string|number|{data:(boolean|{data:string;result1:(string|{data:boolean;})[];items2:boolean;}|({data:number;result1:boolean;items2:boolean;}[]|{data:{data:boolean;result1:number;items2:boolean;};})[])[];})[]|{data:{data:boolean;result1:{data:{data:{data:{};};};result1:{data:{data:(string|number)[];};};};};result1:{data:boolean;result1:number;};})[];}>(\`api/products/\${data.id}/\${data.post-id}/\${data.variant-id}/users.get\`, { method: 'get', params: apiGenOmit(data, ["id","post-id","variant-id"]) })
export const useTFetchProductsIdPostIdVariantIdUsersGetAsync = <T=Omit<{age:number;price:number;count:number;isActive:boolean;createdAt:string;updatedAt:string;name:string;title:string;},'price'>&Partial<{count:number;createdAt:string;updatedAt:string;}>>(data: T) => $fetch<{data:(string|boolean|{data:(boolean|(number|{data:(number|boolean)[];result1?:undefined;}|{data:{data:boolean;};result1:boolean;})[])[][];result1:{data:boolean;};items2:(string|{data:{data:string;result1:number;items2:string;};}|{data:(boolean[]|{data:boolean;})[];result1:{data:(number|boolean)[];};items2:(string|number|boolean)[];}[])[];})[];result1:{data:({data:{data:number;};}|{data:boolean;})[];result1:{data:string;result1:{data:string;};items2:{data:{data:{};}[];};};items2:{data:{data:{data:{};};};result1:boolean;items2:{data:(boolean[][][]|{data:boolean;})[];};};};items2:(boolean|(string|number|{data:(boolean|{data:string;result1:(string|{data:boolean;})[];items2:boolean;}|({data:number;result1:boolean;items2:boolean;}[]|{data:{data:boolean;result1:number;items2:boolean;};})[])[];})[]|{data:{data:boolean;result1:{data:{data:{data:{};};};result1:{data:{data:(string|number)[];};};};};result1:{data:boolean;result1:number;};})[];}>(\`api/products/\${data.id}/\${data.post-id}/\${data.variant-id}/users.get\`, { method: 'get', params: apiGenOmit(data, ["id","post-id","variant-id"]) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /products/[pid]/[user-id].get.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchProductsPidGetByUserId = <T=Input14>(data: T) => useFetch<{data:{data:{data:{data:(number|({data:{data:boolean;};result1?:undefined;}|{data:{data:boolean;};result1:(string|boolean)[];})[]|{data:{data:boolean;}[];})[];result1:{data:{data:string;};result1:{data:{};};};};};result1:{data:boolean;};items2:{data:{data:{data:string[];result1:{data:{};};};};result1:{data:string;result1:string;items2:{data:{};};};};};result1:{data:boolean;}[];}>(\`api/products/\${data.pid}/\${data.user-id}\`, { method: 'get', params: apiGenOmit(data, ["pid","user-id"]) })
export const useTFetchProductsPidGetByUserIdAsync = <T=Input14>(data: T) => $fetch<{data:{data:{data:{data:(number|({data:{data:boolean;};result1?:undefined;}|{data:{data:boolean;};result1:(string|boolean)[];})[]|{data:{data:boolean;}[];})[];result1:{data:{data:string;};result1:{data:{};};};};};result1:{data:boolean;};items2:{data:{data:{data:string[];result1:{data:{};};};};result1:{data:string;result1:string;items2:{data:{};};};};};result1:{data:boolean;}[];}>(\`api/products/\${data.pid}/\${data.user-id}\`, { method: 'get', params: apiGenOmit(data, ["pid","user-id"]) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /profiles/products.delete.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchProfilesProductsRemove = <T={status:string;count:number;}&{email:string;}>(data: T) => useFetch<{data:{data:number;result1:(number|{data:{data:(boolean|{data:{};}|{data:boolean;})[];};result1:number;items2:number;}|{data:(string|{data:(string|boolean)[];result1:{data:number;};}[])[];result1?:undefined;items2?:undefined;})[];items2:boolean;};result1:{data:{data:boolean;result1:number;items2:boolean;};result1:{data:string;result1:({data:boolean;}|{data:{data:{};};})[];items2:{data:{data:{};};};};items2:string;};items2:boolean;}>(\`api/profiles/products.delete\`, { method: 'delete', params: apiGenOmit(data, []) })
export const useTFetchProfilesProductsRemoveAsync = <T={status:string;count:number;}&{email:string;}>(data: T) => $fetch<{data:{data:number;result1:(number|{data:{data:(boolean|{data:{};}|{data:boolean;})[];};result1:number;items2:number;}|{data:(string|{data:(string|boolean)[];result1:{data:number;};}[])[];result1?:undefined;items2?:undefined;})[];items2:boolean;};result1:{data:{data:boolean;result1:number;items2:boolean;};result1:{data:string;result1:({data:boolean;}|{data:{data:{};};})[];items2:{data:{data:{};};};};items2:string;};items2:boolean;}>(\`api/profiles/products.delete\`, { method: 'delete', params: apiGenOmit(data, []) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /settings.post.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchSettingsCreate = <T=Input8>(data: T) => useFetch<{data:{data:number;};result1:(string|{data:{data:({data:{data:boolean;result1:string;items2:number;};}|(string|(string|boolean)[])[])[];};}[]|{data:string;})[];items2:boolean;}>(\`api/settings.post\`, { method: 'post', body: apiGenOmit(data, []) })
export const useTFetchSettingsCreateAsync = <T=Input8>(data: T) => $fetch<{data:{data:number;};result1:(string|{data:{data:({data:{data:boolean;result1:string;items2:number;};}|(string|(string|boolean)[])[])[];};}[]|{data:string;})[];items2:boolean;}>(\`api/settings.post\`, { method: 'post', body: apiGenOmit(data, []) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /settings.put.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchSettingsUpdate = <T={isActive:boolean;price:number;}|{updatedAt:string;}>(data: T) => useFetch<{data:{data:number;};result1:number;items2:string;}>(\`api/settings.put\`, { method: 'put', body: apiGenOmit(data, []) })
export const useTFetchSettingsUpdateAsync = <T={isActive:boolean;price:number;}|{updatedAt:string;}>(data: T) => $fetch<{data:{data:number;};result1:number;items2:string;}>(\`api/settings.put\`, { method: 'put', body: apiGenOmit(data, []) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /tags/[post-id]/[id]/posts/posts.put.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchTagsPostIdIdPostsPostsUpdate = <T={name:string;status:string;}|{updatedAt:string;email:string;}>(data: T) => useFetch<{data:{data:{data:{data:{data:number;result1:(boolean|{data:{data:number;};}|{data:string;})[];};};result1:number;};result1:string;};result1:{data:{data:number[][];result1:number;};result1:{data:{data:{data:{data:{};};};};result1:number;items2:{data:boolean;};};items2:string;}[];}>(\`api/tags/\${data.post-id}/\${data.id}/posts/posts.put\`, { method: 'put', body: apiGenOmit(data, ["post-id","id"]) })
export const useTFetchTagsPostIdIdPostsPostsUpdateAsync = <T={name:string;status:string;}|{updatedAt:string;email:string;}>(data: T) => $fetch<{data:{data:{data:{data:{data:number;result1:(boolean|{data:{data:number;};}|{data:string;})[];};};result1:number;};result1:string;};result1:{data:{data:number[][];result1:number;};result1:{data:{data:{data:{data:{};};};};result1:number;items2:{data:boolean;};};items2:string;}[];}>(\`api/tags/\${data.post-id}/\${data.id}/posts/posts.put\`, { method: 'put', body: apiGenOmit(data, ["post-id","id"]) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /tags/tags/[type]/users.post.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchTagsTagsTypeUsersCreate = <T=Input16>(data: T) => useFetch<{data:boolean;result1:boolean;items2:{data:string[][];result1:boolean;};}>(\`api/tags/tags/\${data.type}/users.post\`, { method: 'post', body: apiGenOmit(data, ["type"]) })
export const useTFetchTagsTagsTypeUsersCreateAsync = <T=Input16>(data: T) => $fetch<{data:boolean;result1:boolean;items2:{data:string[][];result1:boolean;};}>(\`api/tags/tags/\${data.type}/users.post\`, { method: 'post', body: apiGenOmit(data, ["type"]) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /users.post.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchUsersCreate = <T=Input21>(data: T) => useFetch<{data:{data:{data:boolean;result1:(string|({data:number;result1:{data:(string|boolean)[];};items2:string;}|{data:{data:(number|boolean)[];};result1:{data:{};};items2:(boolean|(string|number)[]|{data:string;})[];}|{data:(number|boolean)[];result1?:undefined;items2?:undefined;})[]|({data:number;result1:number;}|(({data:boolean;result1?:undefined;items2?:undefined;}|{data:number;result1:string;items2?:undefined;}|{data:boolean;result1:boolean;items2:boolean;})[]|(boolean|{data:number;result1:number;})[])[])[])[];};result1:string;items2:boolean;};result1:({data:{data:{data:(boolean|{data:{data:number;result1:number;};})[];result1:(string|({data:boolean;result1?:undefined;items2?:undefined;}|{data:boolean;result1:number;items2:number;})[])[];};};result1:(string|boolean|{data:number;result1:{data:{data:{};};result1:(string|number)[];items2:{data:string[];};};items2:({data:string;result1:{data:boolean;};}|(string|number)[][]|(boolean|{data:number;result1:boolean;})[])[];})[];}|(string|(boolean|{data:boolean;result1:(number|{data:(string|boolean)[];result1:boolean;})[];items2:boolean[];})[])[])[];}>(\`api/users.post\`, { method: 'post', body: apiGenOmit(data, []) })
export const useTFetchUsersCreateAsync = <T=Input21>(data: T) => $fetch<{data:{data:{data:boolean;result1:(string|({data:number;result1:{data:(string|boolean)[];};items2:string;}|{data:{data:(number|boolean)[];};result1:{data:{};};items2:(boolean|(string|number)[]|{data:string;})[];}|{data:(number|boolean)[];result1?:undefined;items2?:undefined;})[]|({data:number;result1:number;}|(({data:boolean;result1?:undefined;items2?:undefined;}|{data:number;result1:string;items2?:undefined;}|{data:boolean;result1:boolean;items2:boolean;})[]|(boolean|{data:number;result1:number;})[])[])[])[];};result1:string;items2:boolean;};result1:({data:{data:{data:(boolean|{data:{data:number;result1:number;};})[];result1:(string|({data:boolean;result1?:undefined;items2?:undefined;}|{data:boolean;result1:number;items2:number;})[])[];};};result1:(string|boolean|{data:number;result1:{data:{data:{};};result1:(string|number)[];items2:{data:string[];};};items2:({data:string;result1:{data:boolean;};}|(string|number)[][]|(boolean|{data:number;result1:boolean;})[])[];})[];}|(string|(boolean|{data:boolean;result1:(number|{data:(string|boolean)[];result1:boolean;})[];items2:boolean[];})[])[])[];}>(\`api/users.post\`, { method: 'post', body: apiGenOmit(data, []) })
"
`;

exports[`Test type extraction and composable generation on small real world example > generates a composable for endpoint: /users/settings/messages/users/settings.get.ts 1`] = `
"import { useFetch } from 'nuxt/app'
export const useTFetchUsersSettingsMessagesUsersSettingsGet = <T=Input25>(data: T) => useFetch<{data:{data:{data:{data:((number|boolean|boolean[])[]|{data:{data:number[];};})[];};result1:string;};result1:boolean;items2:boolean;};result1:boolean;items2:{data:{data:boolean;};};}>(\`api/users/settings/messages/users/settings.get\`, { method: 'get', params: apiGenOmit(data, []) })
export const useTFetchUsersSettingsMessagesUsersSettingsGetAsync = <T=Input25>(data: T) => $fetch<{data:{data:{data:{data:((number|boolean|boolean[])[]|{data:{data:number[];};})[];};result1:string;};result1:boolean;items2:boolean;};result1:boolean;items2:{data:{data:boolean;};};}>(\`api/users/settings/messages/users/settings.get\`, { method: 'get', params: apiGenOmit(data, []) })
"
`;
